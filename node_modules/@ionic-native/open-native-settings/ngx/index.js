import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var OpenNativeSettings = /** @class */ (function (_super) {
    __extends(OpenNativeSettings, _super);
    function OpenNativeSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenNativeSettings.prototype.open = function (setting) { return cordova(this, "open", {}, arguments); };
    OpenNativeSettings.pluginName = "OpenNativeSettings";
    OpenNativeSettings.plugin = "cordova-open-native-settings";
    OpenNativeSettings.pluginRef = "cordova.plugins.settings";
    OpenNativeSettings.repo = "https://github.com/guyromb/Cordova-open-native-settings";
    OpenNativeSettings.platforms = ["Android", "iOS"];
    OpenNativeSettings.decorators = [
        { type: Injectable }
    ];
    return OpenNativeSettings;
}(IonicNativePlugin));
export { OpenNativeSettings };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL29wZW4tbmF0aXZlLXNldHRpbmdzL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQW1HaEMsc0NBQWlCOzs7O0lBT3ZELGlDQUFJLGFBQUMsT0FBbUM7Ozs7Ozs7Z0JBUnpDLFVBQVU7OzZCQW5HWDtFQW9Hd0MsaUJBQWlCO1NBQTVDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIE9wZW4gTmF0aXZlIFNldHRpbmdzXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBsdWdpbiB0byBvcGVuIG5hdGl2ZSBzY3JlZW5zIG9mIGlPUy9hbmRyb2lkIHNldHRpbmdzXG4gKiBAdXNhZ2VcbiAqIFlvdSBjYW4gb3BlbiBhbnkgb2YgdGhlc2Ugc2V0dGluZ3M6XG4gKiBgYGBcbiAqICBcImFib3V0XCIsIC8vIGlvc1xuICogIFwiYWNjZXNzaWJpbGl0eVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImFjY291bnRcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiAgXCJhaXJwbGFuZV9tb2RlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogIFwiYXBuXCIsIC8vIGFuZHJvaWRcbiAqICBcImFwcGxpY2F0aW9uX2RldGFpbHNcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiAgXCJhcHBsaWNhdGlvbl9kZXZlbG9wbWVudFwiLCAvLyBhbmRyb2lkXG4gKiAgXCJhcHBsaWNhdGlvblwiLCAvLyBhbmRyb2lkXG4gKiAgXCJhdXRvbG9ja1wiLCAvLyBpb3NcbiAqICBcImJhdHRlcnlfb3B0aW1pemF0aW9uXCIsIC8vIGFuZHJvaWRcbiAqICBcImJsdWV0b290aFwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImNhc3RsZVwiLCAvLyBpb3NcbiAqICBcImNhcHRpb25pbmdcIiwgLy8gYW5kcm9pZFxuICogIFwiY2FzdFwiLCAvLyBhbmRyb2lkXG4gKiAgXCJjZWxsdWxhcl91c2FnZVwiLCAvLyBpb3NcbiAqICBcImNvbmZpZ3VyYXRpb25fbGlzdFwiLCAvLyBpb3NcbiAqICBcImRhdGFfcm9hbWluZ1wiLCAvLyBhbmRyb2lkXG4gKiAgXCJkYXRlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogIFwiZGlzcGxheVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImRyZWFtXCIsIC8vIGFuZHJvaWRcbiAqICBcImZhY2V0aW1lXCIsIC8vIGlvc1xuICogIFwiaG9tZVwiLCAvLyBhbmRyb2lkXG4gKiAgXCJrZXlib2FyZFwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqICBcImtleWJvYXJkX3N1YnR5cGVcIiwgLy8gYW5kcm9pZFxuICogIFwibG9jYWxlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJsb2NhdGlvblwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwibG9jYXRpb25zXCIsIC8vIGlvc1xuICogXCJtYW5hZ2VfYWxsX2FwcGxpY2F0aW9uc1wiLCAvLyBhbmRyb2lkXG4gKiBcIm1hbmFnZV9hcHBsaWNhdGlvbnNcIiwgLy8gYW5kcm9pZFxuICogXCJtZW1vcnlfY2FyZFwiLCAvLyBhbmRyb2lkXG4gKiBcIm11c2ljXCIsIC8vIGlvc1xuICogXCJtdXNpY19lcXVhbGl6ZXJcIiwgLy8gaW9zXG4gKiBcIm11c2ljX3ZvbHVtZVwiLCAvLyBpb3NcbiAqIFwibmV0d29ya1wiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwibmlrZV9pcG9kXCIsIC8vIGlvc1xuICogXCJuZmNzaGFyaW5nXCIsIC8vIGFuZHJvaWRcbiAqIFwibmZjX3BheW1lbnRcIiwgLy8gYW5kcm9pZFxuICogXCJuZmNfc2V0dGluZ3NcIiwgLy8gYW5kcm9pZFxuICogXCJub3Rlc1wiLCAvLyBpb3NcbiAqIFwibm90aWZpY2F0aW9uX2lkXCIsIC8vIGlvc1xuICogXCJwYXNzYm9va1wiLCAvLyBpb3NcbiAqIFwicGhvbmVcIiwgLy8gaW9zXG4gKiBcInBob3Rvc1wiLCAvLyBpb3NcbiAqIFwicHJpbnRcIiwgLy8gYW5kcm9pZFxuICogXCJwcml2YWN5XCIsIC8vIGFuZHJvaWRcbiAqIFwicXVpY2tfbGF1bmNoXCIsIC8vIGFuZHJvaWRcbiAqIFwicmVzZXRcIiwgLy8gaW9zXG4gKiBcInJpbmd0b25lXCIsIC8vIGlvc1xuICogXCJicm93c2VyXCIsIC8vIGlvc1xuICogXCJzZWFyY2hcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcInNlY3VyaXR5XCIsIC8vIGFuZHJvaWRcbiAqIFwic2V0dGluZ3NcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcInNob3dfcmVndWxhdG9yeV9pbmZvXCIsXG4gKiBcInNvdW5kXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJzb2Z0d2FyZV91cGRhdGVcIiwgLy8gaW9zXG4gKiBcInN0b3JhZ2VcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcInN0b3JlXCIsIC8vIGlvcywgYW5kcm9pZFxuICogXCJzeW5jXCIsIC8vIGFuZHJvaWRcbiAqIFwidGV0aGVyaW5nXCIsIC8vIGlvc1xuICogXCJ0d2l0dGVyXCIsIC8vIGlvc1xuICogXCJ0b3VjaFwiLCAvLyBpb3NcbiAqIFwidXNhZ2VcIiwgLy8gaW9zLCBhbmRyb2lkXG4gKiBcInVzZXJfZGljdGlvbmFyeVwiLCAvLyBhbmRyb2lkXG4gKiBcInZpZGVvXCIsIC8vIGlvc1xuICogXCJ2b2ljZV9pbnB1dFwiLCAvLyBhbmRyb2lkXG4gKiBcInZwblwiLCAvLyBpb3NcbiAqIFwid2FsbHBhcGVyXCIsIC8vIGlvc1xuICogXCJ3aWZpX2lwXCIsIC8vIGFuZHJvaWRcbiAqIFwid2lmaVwiLCAvLyBpb3MsIGFuZHJvaWRcbiAqIFwid2lyZWxlc3NcIiAvLyBhbmRyb2lkXG4gKiAgYGBgXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBPcGVuTmF0aXZlU2V0dGluZ3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL29wZW4tbmF0aXZlLXNldHRpbmdzL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgb3Blbk5hdGl2ZVNldHRpbmdzOiBPcGVuTmF0aXZlU2V0dGluZ3MpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdPcGVuTmF0aXZlU2V0dGluZ3MnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLW9wZW4tbmF0aXZlLXNldHRpbmdzJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnNldHRpbmdzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ndXlyb21iL0NvcmRvdmEtb3Blbi1uYXRpdmUtc2V0dGluZ3MnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT3Blbk5hdGl2ZVNldHRpbmdzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogT3BlbnMgYSBzZXR0aW5nIGRpYWxvZ1xuICAgKiBAcGFyYW0gc2V0dGluZyB7c3RyaW5nfGFycmF5fSBzZXR0aW5nIG5hbWVcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBvcGVuKHNldHRpbmc6IHN0cmluZyB8IFtzdHJpbmcsIGJvb2xlYW5dKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==