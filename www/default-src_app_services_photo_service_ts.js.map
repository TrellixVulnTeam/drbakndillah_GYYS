{"version":3,"sources":["./node_modules/@capacitor/camera/dist/esm/definitions.js","./node_modules/@capacitor/camera/dist/esm/index.js","./node_modules/@capacitor/filesystem/dist/esm/definitions.js","./node_modules/@capacitor/filesystem/dist/esm/index.js","./src/app/services/photo.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AAC9B;AACP;AACA;AACA;AACA,CAAC,0CAA0C;AACpC;AACP;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C,uC;;;;;;;;;;;;;;;;;;;;AC1BiD;AACjD,eAAe,+DAAc;AAC7B,eAAe,8JAAe;AAC9B,CAAC;AAC6B;AACZ;AAClB,iC;;;;;;;;;;;;;;;;;;ACNO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP,uC;;;;;;;;;;;;;;;;;;;;;AC5FiD;AACjD,mBAAmB,+DAAc;AACjC,eAAe,kKAAe;AAC9B,CAAC;AAC6B;AACR;AACtB,iC;;;;;;;;;;;;;;;;;;;;;;;ACN2C;AACuC;AACtC;AACkB;AACjB;AACH;IAO7B,YAAY,SAAZ,YAAY;IAIvB,YAAoB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QAH/B,WAAM,GAAgB,EAAE,CAAC;QACxB,kBAAa,GAAW,QAAQ,CAAC;QA2KzC,wBAAmB,GAAG,CAAC,IAAU,EAAE,EAAE,CACnC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC9B,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC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","file":"default-src_app_services_photo_service_ts.js","sourcesContent":["export var CameraSource;\n(function (CameraSource) {\n    /**\n     * Prompts the user to select either the photo album or take a photo.\n     */\n    CameraSource[\"Prompt\"] = \"PROMPT\";\n    /**\n     * Take a new photo using the camera.\n     */\n    CameraSource[\"Camera\"] = \"CAMERA\";\n    /**\n     * Pick an existing photo fron the gallery or photo album.\n     */\n    CameraSource[\"Photos\"] = \"PHOTOS\";\n})(CameraSource || (CameraSource = {}));\nexport var CameraDirection;\n(function (CameraDirection) {\n    CameraDirection[\"Rear\"] = \"REAR\";\n    CameraDirection[\"Front\"] = \"FRONT\";\n})(CameraDirection || (CameraDirection = {}));\nexport var CameraResultType;\n(function (CameraResultType) {\n    CameraResultType[\"Uri\"] = \"uri\";\n    CameraResultType[\"Base64\"] = \"base64\";\n    CameraResultType[\"DataUrl\"] = \"dataUrl\";\n})(CameraResultType || (CameraResultType = {}));\n//# sourceMappingURL=definitions.js.map","import { registerPlugin } from '@capacitor/core';\nconst Camera = registerPlugin('Camera', {\n    web: () => import('./web').then(m => new m.CameraWeb()),\n});\nexport * from './definitions';\nexport { Camera };\n//# sourceMappingURL=index.js.map","export var Directory;\n(function (Directory) {\n    /**\n     * The Documents directory\n     * On iOS it's the app's documents directory.\n     * Use this directory to store user-generated content.\n     * On Android it's the Public Documents folder, so it's accessible from other apps.\n     * It's not accesible on Android 10 unless the app enables legacy External Storage\n     * by adding `android:requestLegacyExternalStorage=\"true\"` in the `application` tag\n     * in the `AndroidManifest.xml`.\n     * It's not accesible on Android 11 or newer.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Documents\"] = \"DOCUMENTS\";\n    /**\n     * The Data directory\n     * On iOS it will use the Documents directory\n     * On Android it's the directory holding application files.\n     * Files will be deleted when the application is uninstalled.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Data\"] = \"DATA\";\n    /**\n     * The Cache directory\n     * Can be deleted in cases of low memory, so use this directory to write app-specific files\n     * that your app can re-create easily.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"Cache\"] = \"CACHE\";\n    /**\n     * The external directory\n     * On iOS it will use the Documents directory\n     * On Android it's the directory on the primary shared/external\n     * storage device where the application can place persistent files it owns.\n     * These files are internal to the applications, and not typically visible\n     * to the user as media.\n     * Files will be deleted when the application is uninstalled.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"External\"] = \"EXTERNAL\";\n    /**\n     * The external storage directory\n     * On iOS it will use the Documents directory\n     * On Android it's the primary shared/external storage directory.\n     * It's not accesible on Android 10 unless the app enables legacy External Storage\n     * by adding `android:requestLegacyExternalStorage=\"true\"` in the `application` tag\n     * in the `AndroidManifest.xml`.\n     * It's not accesible on Android 11 or newer.\n     *\n     * @since 1.0.0\n     */\n    Directory[\"ExternalStorage\"] = \"EXTERNAL_STORAGE\";\n})(Directory || (Directory = {}));\nexport var Encoding;\n(function (Encoding) {\n    /**\n     * Eight-bit UCS Transformation Format\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"UTF8\"] = \"utf8\";\n    /**\n     * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the\n     * Unicode character set\n     * This encoding is only supported on Android.\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"ASCII\"] = \"ascii\";\n    /**\n     * Sixteen-bit UCS Transformation Format, byte order identified by an\n     * optional byte-order mark\n     * This encoding is only supported on Android.\n     *\n     * @since 1.0.0\n     */\n    Encoding[\"UTF16\"] = \"utf16\";\n})(Encoding || (Encoding = {}));\n/**\n * @deprecated Use `Directory`.\n * @since 1.0.0\n */\nexport const FilesystemDirectory = Directory;\n/**\n * @deprecated Use `Encoding`.\n * @since 1.0.0\n */\nexport const FilesystemEncoding = Encoding;\n//# sourceMappingURL=definitions.js.map","import { registerPlugin } from '@capacitor/core';\nconst Filesystem = registerPlugin('Filesystem', {\n    web: () => import('./web').then(m => new m.FilesystemWeb()),\n});\nexport * from './definitions';\nexport { Filesystem };\n//# sourceMappingURL=index.js.map","import { Injectable } from '@angular/core';\r\nimport { Camera, CameraResultType, CameraSource, Photo } from '@capacitor/camera';\r\nimport { Capacitor } from '@capacitor/core';\r\nimport { Directory, Filesystem } from '@capacitor/filesystem';\r\nimport { Storage } from '@capacitor/storage';\r\nimport { Platform } from '@ionic/angular';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PhotoService {\r\n  public photos: UserPhoto[] = [];\r\n  private PHOTO_STORAGE: string = 'photos';\r\n\r\n  constructor(private platform: Platform) {}\r\n\r\n  public async loadSaved() {\r\n    // Retrieve cached photo array data\r\n    const photoList = await Storage.get({ key: this.PHOTO_STORAGE });\r\n    this.photos = JSON.parse(photoList.value) || [];\r\n\r\n    // If running on the web...\r\n    if (!this.platform.is('hybrid')) {\r\n      // Display the photo by reading into base64 format\r\n      for (let photo of this.photos) {\r\n        // Read each saved photo's data from the Filesystem\r\n        const readFile = await Filesystem.readFile({\r\n          path: photo.filepath,\r\n          directory: Directory.Data,\r\n        });\r\n\r\n        // Web platform only: Load the photo as base64 data\r\n        photo.webviewPath = `data:image/jpeg;base64,${readFile.data}`;\r\n        // console.log(photo.webviewPath);\r\n       \r\n      }\r\n    }\r\n    return(this.photos);\r\n\r\n  }\r\n\r\n  /* Use the device camera to take a photo:\r\n  // https://capacitor.ionicframework.com/docs/apis/camera\r\n\r\n  // Store the photo data into permanent file storage:\r\n  // https://capacitor.ionicframework.com/docs/apis/filesystem\r\n\r\n  // Store a reference to all photo filepaths using Storage API:\r\n  // https://capacitor.ionicframework.com/docs/apis/storage\r\n  */\r\n  public async addNewToGallery() {\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Photos, // automatically take a new photo with the camera\r\n      quality: 100, // highest quality (0 to 100)\r\n    });\r\n\r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n\r\n    // Add new photo to Photos array\r\n    this.photos.unshift(savedImageFile);\r\n\r\n    // Cache all photo data for future retrieval\r\n    Storage.set({\r\n      key: this.PHOTO_STORAGE,\r\n      value: JSON.stringify(this.photos),\r\n    });\r\n\r\n    this.loadSaved();\r\n  }\r\n\r\n  public async addNewToGallery_phone() {\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Photos, // automatically take a new photo with the camera\r\n      quality: 100, // highest quality (0 to 100)\r\n    });\r\n\r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n\r\n    // Add new photo to Photos array\r\n    this.photos.unshift(savedImageFile);\r\n\r\n    // Cache all photo data for future retrieval\r\n    Storage.set({\r\n      key: this.PHOTO_STORAGE,\r\n      value: JSON.stringify(this.photos),\r\n    });\r\n  }\r\n\r\n  public async addNewToGalleryFromPhone() {\r\n    // Take a photo\r\n    const capturedPhoto = await Camera.getPhoto({\r\n      resultType: CameraResultType.Uri, // file-based data; provides best performance\r\n      source: CameraSource.Camera, // automatically take a new photo with the camera\r\n      quality: 100, // highest quality (0 to 100)\r\n    });\r\n\r\n    const savedImageFile = await this.savePicture(capturedPhoto);\r\n\r\n    // Add new photo to Photos array\r\n    this.photos.unshift(savedImageFile);\r\n\r\n    // Cache all photo data for future retrieval\r\n    Storage.set({\r\n      key: this.PHOTO_STORAGE,\r\n      value: JSON.stringify(this.photos),\r\n    });\r\n\r\n    this.loadSaved();\r\n  }\r\n\r\n\r\n  // Save picture to file on device\r\n  private async savePicture(cameraPhoto: Photo) {\r\n    // Convert photo to base64 format, required by Filesystem API to save\r\n    const base64Data = await this.readAsBase64(cameraPhoto);\r\n\r\n    // Write the file to the data directory\r\n    const fileName = new Date().getTime() + '.jpeg';\r\n    const savedFile = await Filesystem.writeFile({\r\n      path: fileName,\r\n      data: base64Data,\r\n      directory: Directory.Data,\r\n    });\r\n\r\n    if (this.platform.is('hybrid')) {\r\n      // Display the new image by rewriting the 'file://' path to HTTP\r\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\r\n      return {\r\n        filepath: savedFile.uri,\r\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\r\n      };\r\n    } else {\r\n      // Use webPath to display the new image instead of base64 since it's\r\n      // already loaded into memory\r\n      return {\r\n        filepath: fileName,\r\n        webviewPath: cameraPhoto.webPath,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Read camera photo into base64 format based on the platform the app is running on\r\n  private async readAsBase64(cameraPhoto: Photo) {\r\n    // \"hybrid\" will detect Cordova or Capacitor\r\n    if (this.platform.is('hybrid')) {\r\n      // Read the file into base64 format\r\n      const file = await Filesystem.readFile({\r\n        path: cameraPhoto.path,\r\n      });\r\n\r\n      return file.data;\r\n    } else {\r\n      // Fetch the photo, read as a blob, then convert to base64 format\r\n      const response = await fetch(cameraPhoto.webPath!);\r\n      const blob = await response.blob();\r\n\r\n      return (await this.convertBlobToBase64(blob)) as string;\r\n    }\r\n  }\r\n\r\n  // Delete picture by removing it from reference data and the filesystem\r\n  public async deletePicture(photo: UserPhoto, position: number) {\r\n    // Remove this photo from the Photos reference data array\r\n    this.photos.splice(position, 1);\r\n\r\n    // Update photos array cache by overwriting the existing photo array\r\n    Storage.set({\r\n      key: this.PHOTO_STORAGE,\r\n      value: JSON.stringify(this.photos),\r\n    });\r\n\r\n    // delete photo file from filesystem\r\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\r\n    await Filesystem.deleteFile({\r\n      path: filename,\r\n      directory: Directory.Data,\r\n    });\r\n  }\r\n\r\n  convertBlobToBase64 = (blob: Blob) =>\r\n    new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onerror = reject;\r\n      reader.onload = () => {\r\n        resolve(reader.result);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n}\r\n\r\nexport interface UserPhoto {\r\n  filepath: string;\r\n  webviewPath: string;\r\n}\r\n"],"sourceRoot":"webpack:///"}